"""Pokemon Generation 1 look-up table, for constant time access to Pokemon data."""
from pypokelib.generation1.constants import dex_consts as dc

# * Kept dict here for faster lookup time for "pass by str" in Pokemon()
# * compared to list or tuple, for example
DEX_HELPER_STR_TO_NUM = {
    "Bulbasaur": 1,
    "Ivysaur": 2,
    "Venusaur": 3,
    "Charmander": 4,
    "Charmeleon": 5,
    "Charizard": 6,
    "Squirtle": 7,
    "Wartortle": 8,
    "Blastoise": 9,
    "Caterpie": 10,
    "Metapod": 11,
    "Butterfree": 12,
    "Weedle": 13,
    "Kakuna": 14,
    "Beedrill": 15,
    "Pidgey": 16,
    "Pidgeotto": 17,
    "Pidgeot": 18,
    "Rattata": 19,
    "Raticate": 20,
    "Spearow": 21,
    "Fearow": 22,
    "Ekans": 23,
    "Arbok": 24,
    "Pikachu": 25,
    "Raichu": 26,
    "Sandshrew": 27,
    "Sandslash": 28,
    "Nidoran♀": 29,
    "Nidorina": 30,
    "Nidoqueen": 31,
    "Nidoran♂": 32,
    "Nidorino": 33,
    "Nidoking": 34,
    "Clefairy": 35,
    "Clefable": 36,
    "Vulpix": 37,
    "Ninetales": 38,
    "Jigglypuff": 39,
    "Wigglytuff": 40,
    "Zubat": 41,
    "Golbat": 42,
    "Oddish": 43,
    "Gloom": 44,
    "Vileplume": 45,
    "Paras": 46,
    "Parasect": 47,
    "Venonat": 48,
    "Venomoth": 49,
    "Diglett": 50,
    "Dugtrio": 51,
    "Meowth": 52,
    "Persian": 53,
    "Psyduck": 54,
    "Golduck": 55,
    "Mankey": 56,
    "Primeape": 57,
    "Growlithe": 58,
    "Arcanine": 59,
    "Poliwag": 60,
    "Poliwhirl": 61,
    "Poliwrath": 62,
    "Abra": 63,
    "Kadabra": 64,
    "Alakazam": 65,
    "Machop": 66,
    "Machoke": 67,
    "Machamp": 68,
    "Bellsprout": 69,
    "Weepinbell": 70,
    "Victreebel": 71,
    "Tentacool": 72,
    "Tentacruel": 73,
    "Geodude": 74,
    "Graveler": 75,
    "Golem": 76,
    "Ponyta": 77,
    "Rapidash": 78,
    "Slowpoke": 79,
    "Slowbro": 80,
    "Magnemite": 81,
    "Magneton": 82,
    "Farfetch'd": 83,
    "Doduo": 84,
    "Dodrio": 85,
    "Seel": 86,
    "Dewgong": 87,
    "Grimer": 88,
    "Muk": 89,
    "Shellder": 90,
    "Cloyster": 91,
    "Gastly": 92,
    "Haunter": 93,
    "Gengar": 94,
    "Onix": 95,
    "Drowzee": 96,
    "Hypno": 97,
    "Krabby": 98,
    "Kingler": 99,
    "Voltorb": 100,
    "Electrode": 101,
    "Exeggcute": 102,
    "Exeggutor": 103,
    "Cubone": 104,
    "Marowak": 105,
    "Hitmonlee": 106,
    "Hitmonchan": 107,
    "Lickitung": 108,
    "Koffing": 109,
    "Weezing": 110,
    "Rhyhorn": 111,
    "Rhydon": 112,
    "Chansey": 113,
    "Tangela": 114,
    "Kangaskhan": 115,
    "Horsea": 116,
    "Seadra": 117,
    "Goldeen": 118,
    "Seaking": 119,
    "Staryu": 120,
    "Starmie": 121,
    "Mr. Mime": 122,
    "Scyther": 123,
    "Jynx": 124,
    "Electabuzz": 125,
    "Magmar": 126,
    "Pinsir": 127,
    "Tauros": 128,
    "Magikarp": 129,
    "Gyarados": 130,
    "Lapras": 131,
    "Ditto": 132,
    "Eevee": 133,
    "Vaporeon": 134,
    "Jolteon": 135,
    "Flareon": 136,
    "Porygon": 137,
    "Omanyte": 138,
    "Omastar": 139,
    "Kabuto": 140,
    "Kabutops": 141,
    "Aerodactyl": 142,
    "Snorlax": 143,
    "Articuno": 144,
    "Zapdos": 145,
    "Moltres": 146,
    "Dratini": 147,
    "Dragonair": 148,
    "Dragonite": 149,
    "Mewtwo": 150,
    "Mew": 151,
}


# TODO - Remember to update learnset in dex_consts.py
# * Since this is a tuple, it is immutable. This is good because it prevents
# * accidental changes to the Pokedex.
# * Also, we can search by index, which is marginally faster than searching by
# * key, but more importantly, it incurs less memory overhead than a dict.
POKEDEX: tuple[dc.FullPokeEntry] = (
    dc.MISSINGNO_ENTRY,
    dc.BULBASAUR_DEX_ENTRY,
    dc.IVYSAUR_DEX_ENTRY,
    dc.VENUSAUR_DEX_ENTRY,
    dc.CHARMANDER_DEX_ENTRY,
    dc.CHARMELEON_DEX_ENTRY,
    dc.CHARIZARD_DEX_ENTRY,
    dc.SQUIRTLE_DEX_ENTRY,
    dc.WARTORTLE_DEX_ENTRY,
    dc.BLASTOISE_DEX_ENTRY,
    dc.CATERPIE_DEX_ENTRY,
    dc.METAPOD_DEX_ENTRY,
    dc.BUTTERFREE_DEX_ENTRY,
    dc.WEEDLE_DEX_ENTRY,
    dc.KAKUNA_DEX_ENTRY,
    dc.BEEDRILL_DEX_ENTRY,
    dc.PIDGEY_DEX_ENTRY,
    dc.PIDGEOTTO_DEX_ENTRY,
    dc.PIDGEOT_DEX_ENTRY,
    dc.RATTATA_DEX_ENTRY,
    dc.RATICATE_DEX_ENTRY,
    dc.SPEAROW_DEX_ENTRY,
    dc.FEAROW_DEX_ENTRY,
    dc.EKANS_DEX_ENTRY,
    dc.ARBOK_DEX_ENTRY,
    dc.PIKACHU_DEX_ENTRY,
    dc.RAICHU_DEX_ENTRY,
    dc.SANDSHREW_DEX_ENTRY,
    dc.SANDSLASH_DEX_ENTRY,
    dc.NIDORAN_F_DEX_ENTRY,
    dc.NIDORINA_DEX_ENTRY,
    dc.NIDOQUEEN_DEX_ENTRY,
    dc.NIDORAN_M_DEX_ENTRY,
    dc.NIDORINO_DEX_ENTRY,
    dc.NIDOKING_DEX_ENTRY,
    dc.CLEFAIRY_DEX_ENTRY,
    dc.CLEFABLE_DEX_ENTRY,
    dc.VULPIX_DEX_ENTRY,
    dc.NINETALES_DEX_ENTRY,
    dc.JIGGLYPUFF_DEX_ENTRY,
    dc.WIGGLYTUFF_DEX_ENTRY,
    dc.ZUBAT_DEX_ENTRY,
    dc.GOLBAT_DEX_ENTRY,
    dc.ODDISH_DEX_ENTRY,
    dc.GLOOM_DEX_ENTRY,
    dc.VILEPLUME_DEX_ENTRY,
    dc.PARAS_DEX_ENTRY,
    dc.PARASECT_DEX_ENTRY,
    dc.VENONAT_DEX_ENTRY,
    dc.VENOMOTH_DEX_ENTRY,
    dc.DIGLETT_DEX_ENTRY,
    dc.DUGTRIO_DEX_ENTRY,
    dc.MEOWTH_DEX_ENTRY,
    dc.PERSIAN_DEX_ENTRY,
    dc.PSYDUCK_DEX_ENTRY,
    dc.GOLDUCK_DEX_ENTRY,
    dc.MANKEY_DEX_ENTRY,
    dc.PRIMEAPE_DEX_ENTRY,
    dc.GROWLITHE_DEX_ENTRY,
    dc.ARCANINE_DEX_ENTRY,
    dc.POLIWAG_DEX_ENTRY,
    dc.POLIWHIRL_DEX_ENTRY,
    dc.POLIWRATH_DEX_ENTRY,
    dc.ABRA_DEX_ENTRY,
    dc.KADABRA_DEX_ENTRY,
    dc.ALAKAZAM_DEX_ENTRY,
    dc.MACHOP_DEX_ENTRY,
    dc.MACHOKE_DEX_ENTRY,
    dc.MACHAMP_DEX_ENTRY,
    dc.BELLSPROUT_DEX_ENTRY,
    dc.WEEPINBELL_DEX_ENTRY,
    dc.VICTREEBEL_DEX_ENTRY,
    dc.TENTACOOL_DEX_ENTRY,
    dc.TENTACRUEL_DEX_ENTRY,
    dc.GEODUDE_DEX_ENTRY,
    dc.GRAVELER_DEX_ENTRY,
    dc.GOLEM_DEX_ENTRY,
    dc.PONYTA_DEX_ENTRY,
    dc.RAPIDASH_DEX_ENTRY,
    dc.SLOWPOKE_DEX_ENTRY,
    dc.SLOWBRO_DEX_ENTRY,
    dc.MAGNEMITE_DEX_ENTRY,
    dc.MAGNETON_DEX_ENTRY,
    dc.FARFETCHD_DEX_ENTRY,
    dc.DODUO_DEX_ENTRY,
    dc.DODRIO_DEX_ENTRY,
    dc.SEEL_DEX_ENTRY,
    dc.DEWGONG_DEX_ENTRY,
    dc.GRIMER_DEX_ENTRY,
    dc.MUK_DEX_ENTRY,
    dc.SHELLDER_DEX_ENTRY,
    dc.CLOYSTER_DEX_ENTRY,
    dc.GASTLY_DEX_ENTRY,
    dc.HAUNTER_DEX_ENTRY,
    dc.GENGAR_DEX_ENTRY,
    dc.ONIX_DEX_ENTRY,
    dc.DROWZEE_DEX_ENTRY,
    dc.HYPNO_DEX_ENTRY,
    dc.KRABBY_DEX_ENTRY,
    dc.KINGLER_DEX_ENTRY,
    dc.VOLTORB_DEX_ENTRY,
    dc.ELECTRODE_DEX_ENTRY,
    dc.EXEGGCUTE_DEX_ENTRY,
    dc.EXEGGUTOR_DEX_ENTRY,
    dc.CUBONE_DEX_ENTRY,
    dc.MAROWAK_DEX_ENTRY,
    dc.HITMONLEE_DEX_ENTRY,
    dc.HITMONCHAN_DEX_ENTRY,
    dc.LICKITUNG_DEX_ENTRY,
    dc.KOFFING_DEX_ENTRY,
    dc.WEEZING_DEX_ENTRY,
    dc.RHYHORN_DEX_ENTRY,
    dc.RHYDON_DEX_ENTRY,
    dc.CHANSEY_DEX_ENTRY,
    dc.TANGELA_DEX_ENTRY,
    dc.KANGASKHAN_DEX_ENTRY,
    dc.HORSEA_DEX_ENTRY,
    dc.SEADRA_DEX_ENTRY,
    dc.GOLDEEN_DEX_ENTRY,
    dc.SEAKING_DEX_ENTRY,
    dc.STARYU_DEX_ENTRY,
    dc.STARMIE_DEX_ENTRY,
    dc.MR_MIME_DEX_ENTRY,
    dc.SCYTHER_DEX_ENTRY,
    dc.JYNX_DEX_ENTRY,
    dc.ELECTABUZZ_DEX_ENTRY,
    dc.MAGMAR_DEX_ENTRY,
    dc.PINSIR_DEX_ENTRY,
    dc.TAUROS_DEX_ENTRY,
    dc.MAGIKARP_DEX_ENTRY,
    dc.GYARADOS_DEX_ENTRY,
    dc.LAPRAS_DEX_ENTRY,
    dc.DITTO_DEX_ENTRY,
    dc.EEVEE_DEX_ENTRY,
    dc.VAPOREON_DEX_ENTRY,
    dc.JOLTEON_DEX_ENTRY,
    dc.FLAREON_DEX_ENTRY,
    dc.PORYGON_DEX_ENTRY,
    dc.OMANYTE_DEX_ENTRY,
    dc.OMASTAR_DEX_ENTRY,
    dc.KABUTO_DEX_ENTRY,
    dc.KABUTOPS_DEX_ENTRY,
    dc.AERODACTYL_DEX_ENTRY,
    dc.SNORLAX_DEX_ENTRY,
    dc.ARTICUNO_DEX_ENTRY,
    dc.ZAPDOS_DEX_ENTRY,
    dc.MOLTRES_DEX_ENTRY,
    dc.DRATINI_DEX_ENTRY,
    dc.DRAGONAIR_DEX_ENTRY,
    dc.DRAGONITE_DEX_ENTRY,
    dc.MEWTWO_DEX_ENTRY,
    dc.MEW_DEX_ENTRY
)


def get_mon(specname_or_num: str | int) -> str | int:
    """Return the Pokedex number of the Pokemon with the given name."""
    if isinstance(specname_or_num, str):
        return DEX_HELPER_STR_TO_NUM[specname_or_num]
    if isinstance(specname_or_num, int):
        return POKEDEX[specname_or_num].name
    raise TypeError("Invalid type given. Must be str or int.")
